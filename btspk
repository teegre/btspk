#! /usr/bin/env bash

# Connect bluetooth audio devices and optionally enable equalizer.
# Depends on bluez-tools, bluez-utils, coreutils, libpulse, pulseaudio
# Optional dependency: pulseaudio-equalizer or pulseaudio-equalizer-ladspa

__help() {
cat << 'EOB' >&2
btspk: easily connect bluetooth audio devices and enable equalizer.

Usage:
    btspk <index>
    btspk on [index]
    btspk off
    btspk d
    btspk R
    btspk s | status
    btspk h | help

Options:
    Invoked without argument, display a numbered list of paired bluetooth audio devices.

    <index>   - connect device.
    on        - turn bluetooth on.
    off       - turn bluetooth off.
    d         - disconnect device.
    R         - reconnect last device.
    s, status - show status and exit.
    h, help   - show this help and exit.

EOB
}

__version="1.2"

spkfile="$HOME/.config/speaker"

equalizer() {
  case $1 in
    on ) pulseaudio-equalizer enable &> /dev/null && return 0 ;;
    off) pulseaudio-equalizer disable &> /dev/null && return 0 ;;
  esac
  return 1
}

disconnect() {
  [[ -s "$spkfile" ]] && {
    equalizer off
    bluetoothctl disconnect &> /dev/null || return 1
    :> "$spkfile"
    return 0
  }
  return 1
}

_disconnect() {
  local dev
  [[ -s "$spkfile" ]] &&
    dev="$(get_alias "$(<"$spkfile")")"
  echo "[${dev,,}] disconnecting..."
  cp "$spkfile" "${spkfile}.last" &> /dev/null
  disconnect || { 
    echo "[${dev,,}] could not disconnect!"
    rm "${spkfile}.last" &> /dev/null
    return 1
  }
  echo "[${dev,,}] disconnected."
  equalizer on && echo "equalizer on."
  return 0
}

is_powered() {
  local info __r
  __r="^Powered:[[:space:]](.+)$"
  while read -r info; do
    [[ $info =~ $__r ]] && {
      [[ ${BASH_REMATCH[1]} == "yes" ]] && return 0
      return 1
    }
  done < <(bluetoothctl show)
}

get_info() {
  local info __r param
  param="$1"; shift
  __r="^$param:[[:space:]](.+)$"
  while read -r info; do
    [[ $info =~ $__r ]] && {
      echo "${BASH_REMATCH[1]}"
      return 0
    }
  done < <(bt-device -i "$1" 2>/dev/null)
  return 1
}

is_audio() {
  [[ $(get_info "Icon" "$1") == "audio-card" ]] && return 0
  return 1
}

get_alias() {
    local dev __r
    __r="^(.+)[[:space:]]\[.+\]$"
    dev="$(get_info "Alias" "$1")"
    [[ $dev =~ $__r ]] && {
      echo "${BASH_REMATCH[1]}"
      return 0
    }
    return 1
}

power() {
  [[ $1 == "off" ]] && disconnect
  bluetoothctl power "$1" &> /dev/null
  echo "power is turned $1."
  :> "$spkfile"
}

is_connected() {
  [[ $(get_info "Connected" "$1") == 1 ]] && return 0
  return 1
}

get_status() {
  if is_powered; then 
    echo "power: on"
  else
    echo "power: off"
  fi
  if [[ -s "$spkfile" ]]; then
    local mac
    mac="$(<"$spkfile")"
    dev="$(get_alias "$mac")"
    [[ $dev ]] && echo "device: $dev"
  fi
}

reconnect() {
  [[ -s "${spkfile}.last" ]] || {
    echo "no device found."
    return 1
  }
  local previous
  previous="$(<"${spkfile}.last")"
  [[ $previous ]] && {
    is_connected "$previous" || {
      equalizer off && echo "equalizer off."
      local dev
      dev="$(get_alias "$previous")"
      echo "[${dev,,}] reconnecting..."
      if bluetoothctl connect "$previous" &> /dev/null; then
        vdim d
        echo "[${dev,,}] connected."
        cp "${spkfile}.last" "$spkfile" &> /dev/null
        rm "${spkfile}.last"
        sleep 3
        equalizer on && echo "equalizer on."
        return 0
      else
        echo "[${dev,,}] could not connect!"
        return 1
      fi
    }
    echo "A device is already connected..."
    return 1
  }
}

echo "btspk version $__version - copyright (c) 2021 teegre."
echo -e "This program is provided AS IS with ABSOLUTELY NO WARRANTY.\n"

for opt in "$@"; do
  case $opt in
    d         ) _disconnect; exit $? ;; 
    R         ) reconnect; exit $? ;;
    on        ) power on ;;
    off       ) power off; exit ;;
    s | status) get_status; exit ;;
    h | help  ) __help; exit ;;
    *         ) if [[ $opt =~ ^[0-9+$] ]]; then INDEX="$opt"; else echo "invalid option '$opt'"; exit 1; fi
  esac
done


[[ $* ]] || {
  is_powered || echo -e "bluetooth is turned off.\n"
  [[ -s "${spkfile}.last" ]] && {
    dev="$(get_alias "$(<"${spkfile}.last")")"
    [[ $dev ]] || rm "${spkfile}.last"
    [[ $dev ]] && echo -e "[${dev,,}] last connected device.\n"
  }
  LIST=1
}

__r="^Device ([0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}) (.+)$"

index=0

while read -r device; do
  [[ $device =~ $__r ]] && {
    mac="${BASH_REMATCH[1]}"
    dev="${BASH_REMATCH[2]}"
    is_audio "$dev" || continue
    ((++index))
    [[ $LIST ]] && {
      if is_connected "$mac"; then
          printf "%03d --- %s\n" "$index" "${dev,,} [*]"
      else
          printf "%03d --- %s\n" "$index" "${dev,,}"
      fi
    }
    [[ ! $LIST ]] && ((INDEX==index)) && {
      is_connected "$mac" && { 
        echo "$dev is already connected..."
        exit 0
      }
      echo "[${dev,,}] connecting..."
      is_powered && disconnect
      is_powered || power on
      bluetoothctl connect "$mac" &> /dev/null && {
        vdim d
        sleep 3
        equalizer on && echo "equalizer on."
        echo "$mac" > "$spkfile"
        echo "[${dev,,}] successfully connected."
        success=1
      }
      [[ $success ]] || { 
        echo "[${dev,,}] cannot connect!"
        exit 1
      }
      exit 0
    }
  }
done < <(bluetoothctl devices)

echo
echo "type 'btspk <index>' to connect a device."
echo "type 'btspk help' for more info."
